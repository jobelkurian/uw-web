/**
 * This script is designed to pull Bible versions from the Unfolding Word Project.
 * It will pull all the versions from the catalogUrl, and download the usfm files 
 * into the destinationFolder.  Then you can generate the appropriate
 * HTML for this app.
 */
var uwGrabAvailableTexts = function() {
  /**
   * This classes main object
   *
   * @type {Object}
   * @access private
   */
  var uwObject = {};
  /**
   * Nodejs package request for grabbing the JSON
   *
   * @type {Object}
   * @access private
   */
  var request = require('request');
  /**
   * Nodejs package mkdirp for creating directories
   *
   * @type {Object}
   * @access private
   */
  var mkdirp = require('mkdirp');
  /**
   * Nodejs package del for finding and deleting directories
   *
   * @type {Object}
   * @access private
   */
  var del = require('del');
  /**
   * Nodejs package country-language for finding country language data
   *
   * @type {Object}
   * @access private
   */
  var countryLanguage = require('country-language');
  /**
   * Nodejs package filesystem for writing files
   *
   * @type {Object}
   * @access private
   */
  var fileSystem = require('fs');
  /**
   * Nodejs package download for downloading files
   *
   * @type {Object}
   * @access private
   */
  var download = require('download');
  /**
   * An array of all the current directories that will need to be removed on preparation.
   * This variable is used to track progress on deleting the folders. (async)
   *
   * @type {Array}
   * @access private
   */
  var currentDirectories = [];
  /**
   * The directory wher you want the final files placed.  All folders starting with uw_ in this directory
   * are removed when it prepares the folder.
   *
   * @type {String}
   * @access public
   */
  uwObject.destinationFolder = 'input';
  /**
   * The url to grab the available Bible texts from
   *
   * @type {String}
   * @access publi
   */
  uwObject.catalogUrl = '';
  /**
   * Quiet the notifications produced by this script.  Does not silence errors.
   *
   * @type {Boolean}
   */
  uwObject.silenceNotification = false;
  /**
   * All of our public methods
   */

  /**
   * Grab the current Bibles from the latest Unfolding Word catalog feed.
   * Once the content is received, we pass it to the given callback() function
   * with an array of bibles available.
   *
   * @param {Object} _callback A call back method called when we have retrieved the Bibles
   * @return {void}
   * @access public
   *
   * @author Johnathan Pulos <johnathan@missionaldigerati.org>
   */
  uwObject.getBibles = function(_callback) {
    display('Getting the bibles available from ' + uwObject.catalogUrl + '.');
    request(uwObject.catalogUrl, function(error, response, body) {
      if (!error && response.statusCode == 200) {
        var data = JSON.parse(body);
        var bibles = [];
        for (var i = 0; i < data.cat.length; i++) {
          if (data.cat[i].slug == 'bible') {
            bibles = bibles.concat(getBibleVersions(data.cat[i].langs));
          }
        }

        _callback(bibles);
      } else {
        display('Unable to pull the current Bibles: ' + error, true);
      }
    });
  }
  /**
   * Downloads all the usfm files from Unfolding Word, and sets up the version
   * in the input directory with the correct info.json file.
   *
   * @param  {Array} bibles An array of the available versions
   *
   * @return {void}
   * @access private
   *
   * @author Johnathan Pulos <johnathan@missionaldigerati.org>
   */
  uwObject.downloadBibles = function(bibles) {
    display('Parsing the Bible data.');
    for (var i = 0; i < bibles.length; i++) {
      var bible = bibles[i];
      var directoryPath = uwObject.destinationFolder + '/' + bible.version_info.id;
      /**
       * Let's create the directory for the files
       */
      mkdirp(directoryPath);
      /**
       * let's add the info.json file
       */
      fileSystem.writeFile(directoryPath + '/info.json', JSON.stringify(bible.version_info), function(error) {
        if (error) {
          display('Unable to create the info JSON file at: ' + directoryPath + '/info.json because: ' + error);
        }
      });
      /**
       * Now download all the files
       */
      display('Downloading the usfm files... This may take a while... Go grab a cup of coffee...');
      var fileDownload = new download({});
      for (var f = 0; f < bible.files.length; f++) {
        fileDownload.get(bible.files[f]);
      };
      fileDownload.dest(directoryPath);
      fileDownload.run();
    };
  }
  /**
   * Run the process of grabbing all the texts and downloading the files locally
   *
   * @return {void}
   * @access public
   *
   * @author Johnathan Pulos <johnathan@missionaldigerati.org>
   */
  uwObject.process = function() {
    prepareFolder(function () {
      uwObject.getBibles(function(bibles) {
        uwObject.downloadBibles(bibles);
      });
    });
  };

  /**
   * All of our private methods
   */
  /**
   * A shortcut function for sending your message to the terminal
   *
   * @param  {String} msg The message to display
   *
   * @return {void}
   * @access private
   *
   * @author Johnathan Pulos <johnathan@missionaldigerati.org>
   */
  function display(msg, isError) {
    var start = (isError) ? 'X Error > ' : '> ';
    if (uwObject.silenceNotification === false) {
      console.log(start + msg);
    }
  }
  /**
   * Prepare the folders for the ufw content.  We remove all folders with a uw prefix
   * in the input folder
   *
   * @return {void}
   * @access private
   *
   * @author Johnathan Pulos <johnathan@missionaldigerati.org>
   */
  function prepareFolder(_callback) {
    display('Preparing the input folder.');
    del([uwObject.destinationFolder + '/uw_*'], function (error) {
      if (error) {
        display('Unable to locate directories to clean up received error: ' + error, true);
      } else {
        _callback();
      }
    });
  }
  /**
   * Iterates over the toc data, and makes an array of the files to download
   *
   * @param  {Array} tocData An array of JSON objects storing all the Bible files
   *
   * @return {Array}         An array of all the files to download
   * @access private
   *
   * @author Johnathan Pulos <johnathan@missionaldigerati.org>
   */
  function getFiles(tocData) {
    var files = [];
    for (var i = 0; i < tocData.length; i++) {
      files.push(tocData[i].src);
    };
    return files;
  }
  /**
   * Iterates over the versions of the Bible in a specific language provided by the catalogUrl, and returns an
   * array of objects with each version.
   *
   * Returned Version Object Structure:
   * 
   * {
   *   version_info: {
   *     id:               'uw_en_ulb',
   *     abbr:             'ULB',
   *     name:             'Unlocked Literal Bible',
   *     nameEnglish:      '',
   *     lang:             'eng',
   *     langName:         'English',
   *     langNameEnglish:  'English',
   *     dir:              'ltr',
   *     generator:        'usfm'
   *   },
   *   files: [
   *     'https://api.unfoldingword.org/ulb/txt/1/ulb-en/01-EXD.usfm'
   *   ]
   * }
   *
   * @param  {Array} languages An array of Bible versions available in that language
   *
   * @return {Array}  An array of version objects with all the important data
   * @access private
   *
   * @author Johnathan Pulos <johnathan@missionaldigerati.org>
   */
  function getBibleVersions(languages) {
    var bibleVersions = [];
    for (var l = 0; l < languages.length; l++) {
      var langCode = languages[l].lc;
      var languageData = {};

      countryLanguage.getLanguage(langCode, function(error, language) {
        if (error) {

        } else {
          languageData = language;
        }
      });

      var versions = languages[l].vers;
      for (var i = 0; i < versions.length; i++) {
        var bible = {};
        var version = versions[i];
        bible.version_info = {
          id:               'uw_' + langCode + '_' + version.slug,
          abbr:             version.slug.toUpperCase(),
          name:             version.name,
          nameEnglish:      '',
          lang:             languageData.iso639_3,
          langName:         languageData.nativeName[0],
          langNameEnglish:  languageData.name[0],
          dir:              languageData.direction.toLowerCase(),
          generator:        'usfm'
        };
        bible.files = getFiles(version.toc);
        bibleVersions.push(bible);
      };
    }
    return bibleVersions;
  }
  /**
   * Return this object
   */
  return uwObject;
};
/**
 * Expose the library
 *
 */
uw = new uwGrabAvailableTexts;
exports = module.exports = uw;